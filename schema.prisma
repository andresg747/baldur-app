datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blockchain {
  id          String    @id @default(cuid())
  name        String
  websiteUrl  String?
  scannerUrl  String?
  project     Project[]
  tokenId     String
  token       Token[]
}

enum ProjectType {
  NFT_GAME
  NFT_COLLECTIBLES
  UNDEFINED
}

enum TokenType {
  GOVERNANCE
  UTILITY
  MIXED
  NATIVE
}

model Token {
  id                   String       @id @default(cuid())
  tokenName            String
  tokenSymbol          String
  tokenContractAddress String?
  tokenImageURL        String?
  projectId            String
  tokenType            TokenType
  project              Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Blockchain           Blockchain[]
}

model Project {
  id            String       @id @default(cuid())
  name          String
  bannerUrl     String?
  description   String?      @db.Text
  type          ProjectType  @default(UNDEFINED)
  websiteUrl    String
  tokens        Token[]
  whitepaperUrl String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Blockchain    Blockchain[]
  telegramUrl   String?
  discordUrl    String?
  twitterUrl    String?
  facebookUrl   String?
  instagramUrl  String?
  blogUrl       String?
}
